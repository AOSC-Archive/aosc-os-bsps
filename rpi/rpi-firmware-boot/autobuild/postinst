#!/bin/bash

if ! grep -q "/boot/rpi" /etc/fstab; then
  echo "/boot/rpi does not exist. You need to update files manually, which is installed to /usr/lib/rpi64-boot."
  exit 0
fi

if ! mount -a; then
  echo "Unable to mount /boot/rpi! Not treating as an error, exiting cleanly."
  exit 0
fi

if [ -e /boot/rpi/kernel8.img ]; then
  echo "Copying new firmware..."
  cp /usr/lib/rpi64/boot/*.{elf,bin,dat} /boot/rpi/
else
  echo "Copying kernel and firmware..."
  cp -r /usr/lib/rpi64/boot/* /boot/rpi/
fi

if [ ! -e /boot/rpi/config.txt ]; then
  echo "Creating config.txt..."
  cat > /boot/rpi/config.txt << 'EOF'
# For more options and information see
# http://rpf.io/configtxt
# Some settings may impact device functionality. See link above for details


# uncomment if you get no picture on HDMI for a default "safe" mode
# hdmi_safe=1

# uncomment this if your display has a black border of unused pixels visible
# and your display can output without overscan
disable_overscan=1

# uncomment the following to adjust overscan. Use positive numbers if console
# goes off screen, and negative if there is too much border
#overscan_left=16
#overscan_right=16
#overscan_top=16
#overscan_bottom=16

# uncomment to force a console size. By default it will be display's size minus
# overscan.
# framebuffer_width=1280
# framebuffer_height=720

# uncomment if hdmi display is not detected and composite is being output
# hdmi_force_hotplug=1

# uncomment to force a specific HDMI mode (this will force VGA)
# hdmi_group=2
# hdmi_mode=85

# uncomment to force a HDMI mode rather than DVI. This can make audio work in
# DMT (computer monitor) modes
# hdmi_drive=2
# gpu_mem=320

# uncomment to increase signal to HDMI, if you have interference, blanking, or
# no display
#config_hdmi_boost=4

# uncomment for composite PAL
#sdtv_mode=2

#uncomment to overclock the arm. 700 MHz is the default.
#arm_freq=800

# Uncomment some or all of these to enable the optional hardware interfaces
# dtparam=i2c_arm=on
# dtparam=i2s=on
# dtparam=spi=on

# Uncomment this to enable infrared communication.
# dtoverlay=gpio-ir,gpio_pin=17
# dtoverlay=gpio-ir-tx,gpio_pin=18
enable_uart=1
# Additional overlays and parameters are documented /boot/overlays/README

# Enable audio (loads snd_bcm2835)
dtparam=audio=on

arm_64bit=1

# Debug options
# start_file=start_db.elf
# start_debug=1

[pi4]
# Enable DRM VC4 V3D driver on top of the dispmanx display stack
dtoverlay=vc4-fkms-v3d
max_framebuffers=2

# Uncomment this for autoloading Bluetooth UART
# dtparam=krnbt=on

[all]
dtoverlay=vc4-fkms-v3d
include distcfg.txt
EOF

fi

if [ ! -e /boot/rpi/distcfg.txt ]; then
  echo "Creating distcfg.txt..."
  cat > /boot/rpi/distcfg.txt << 'EOF'
arm_64bit=1
kernel=kernel8.img
# Uncomment this for initrd support
# You should copy your initrd to boot partition before enabling initrd
# initramfs initrd.img followkernel
EOF
fi

if [ ! -e /boot/rpi/cmdline.txt ]; then
  PARTUUID="$(lsblk -x MOUNTPOINT -o MOUNTPOINT,PARTUUID | egrep '^/\s' | awk '{print $2}')"
  echo "Generating new cmdline.txt..."
  echo -n "root=PARTUUID=${PARTUUID} rw elevator=deadline fsck.repair=yes rootwait" > /boot/rpi/cmdline.txt
fi
