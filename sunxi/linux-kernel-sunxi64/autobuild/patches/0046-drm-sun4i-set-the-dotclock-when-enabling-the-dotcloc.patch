From 3b5bcc3d4dbdae13ad8f0f5620d480d27809a621 Mon Sep 17 00:00:00 2001
From: Icenowy Zheng <icenowy@aosc.io>
Date: Thu, 16 Aug 2018 21:25:13 +0800
Subject: [PATCH 046/153] drm: sun4i: set the dotclock when enabling the
 dotclock

Currently the dotclock is set when setting the mode of TCON. After this
the dotclock may gets changed, e.g. when the downstream encoder try to
change another clock under the same parent.

As the dotclock is saved by CRTC state, set it when the clock is about
to be enabled, and use clk_set_rate_exclusive() to get the exclusivity
at the same time. This will prevent any unexpected changes to the
dotclock.

Signed-off-by: Icenowy Zheng <icenowy@aosc.io>
---
 drivers/gpu/drm/sun4i/sun4i_crtc.c |  5 +++--
 drivers/gpu/drm/sun4i/sun4i_tcon.c | 14 ++++----------
 drivers/gpu/drm/sun4i/sun4i_tcon.h |  3 ++-
 3 files changed, 9 insertions(+), 13 deletions(-)

diff --git a/drivers/gpu/drm/sun4i/sun4i_crtc.c b/drivers/gpu/drm/sun4i/sun4i_crtc.c
index 3eedf335a935..b63fbf0de9ce 100644
--- a/drivers/gpu/drm/sun4i/sun4i_crtc.c
+++ b/drivers/gpu/drm/sun4i/sun4i_crtc.c
@@ -113,7 +113,7 @@ static void sun4i_crtc_atomic_disable(struct drm_crtc *crtc,
 
 	drm_crtc_vblank_off(crtc);
 
-	sun4i_tcon_set_status(scrtc->tcon, encoder, false);
+	sun4i_tcon_set_status(scrtc->tcon, encoder, false, 0);
 
 	if (crtc->state->event && !crtc->state->active) {
 		spin_lock_irq(&crtc->dev->event_lock);
@@ -132,7 +132,8 @@ static void sun4i_crtc_atomic_enable(struct drm_crtc *crtc,
 
 	DRM_DEBUG_DRIVER("Enabling the CRTC\n");
 
-	sun4i_tcon_set_status(scrtc->tcon, encoder, true);
+	sun4i_tcon_set_status(scrtc->tcon, encoder, true,
+			      crtc->state->adjusted_mode.crtc_clock * 1000);
 
 	drm_crtc_vblank_on(crtc);
 }
diff --git a/drivers/gpu/drm/sun4i/sun4i_tcon.c b/drivers/gpu/drm/sun4i/sun4i_tcon.c
index 5676b7faaca0..864d724d29a1 100644
--- a/drivers/gpu/drm/sun4i/sun4i_tcon.c
+++ b/drivers/gpu/drm/sun4i/sun4i_tcon.c
@@ -80,7 +80,7 @@ static int sun4i_tcon_get_pixel_depth(const struct drm_encoder *encoder)
 }
 
 static void sun4i_tcon_channel_set_status(struct sun4i_tcon *tcon, int channel,
-					  bool enabled)
+					  bool enabled, unsigned long dotclock)
 {
 	struct clk *clk;
 
@@ -105,8 +105,8 @@ static void sun4i_tcon_channel_set_status(struct sun4i_tcon *tcon, int channel,
 	}
 
 	if (enabled) {
+		clk_set_rate_exclusive(clk, dotclock);
 		clk_prepare_enable(clk);
-		clk_rate_exclusive_get(clk);
 	} else {
 		clk_rate_exclusive_put(clk);
 		clk_disable_unprepare(clk);
@@ -161,7 +161,7 @@ static void sun4i_tcon_lvds_set_status(struct sun4i_tcon *tcon,
 
 void sun4i_tcon_set_status(struct sun4i_tcon *tcon,
 			   const struct drm_encoder *encoder,
-			   bool enabled)
+			   bool enabled, unsigned long dotclock)
 {
 	bool is_lvds = false;
 	int channel;
@@ -193,7 +193,7 @@ void sun4i_tcon_set_status(struct sun4i_tcon *tcon,
 	if (is_lvds && enabled)
 		sun4i_tcon_lvds_set_status(tcon, encoder, true);
 
-	sun4i_tcon_channel_set_status(tcon, channel, enabled);
+	sun4i_tcon_channel_set_status(tcon, channel, enabled, dotclock);
 }
 
 void sun4i_tcon_enable_vblank(struct sun4i_tcon *tcon, bool enable)
@@ -267,9 +267,6 @@ static int sun4i_tcon_get_clk_delay(const struct drm_display_mode *mode,
 static void sun4i_tcon0_mode_set_common(struct sun4i_tcon *tcon,
 					const struct drm_display_mode *mode)
 {
-	/* Configure the dot clock */
-	clk_set_rate(tcon->dclk, mode->crtc_clock * 1000);
-
 	/* Set the resolution */
 	regmap_write(tcon->regs, SUN4I_TCON0_BASIC0_REG,
 		     SUN4I_TCON0_BASIC0_X(mode->crtc_hdisplay) |
@@ -497,9 +494,6 @@ static void sun4i_tcon1_mode_set(struct sun4i_tcon *tcon,
 
 	WARN_ON(!tcon->quirks->has_channel_1);
 
-	/* Configure the dot clock */
-	clk_set_rate(tcon->sclk1, mode->crtc_clock * 1000);
-
 	/* Adjust clock delay */
 	clk_delay = sun4i_tcon_get_clk_delay(mode, 1);
 	regmap_update_bits(tcon->regs, SUN4I_TCON1_CTL_REG,
diff --git a/drivers/gpu/drm/sun4i/sun4i_tcon.h b/drivers/gpu/drm/sun4i/sun4i_tcon.h
index f6a071cd5a6f..bbcf1fc5727d 100644
--- a/drivers/gpu/drm/sun4i/sun4i_tcon.h
+++ b/drivers/gpu/drm/sun4i/sun4i_tcon.h
@@ -275,7 +275,8 @@ void sun4i_tcon_mode_set(struct sun4i_tcon *tcon,
 			 const struct drm_encoder *encoder,
 			 const struct drm_display_mode *mode);
 void sun4i_tcon_set_status(struct sun4i_tcon *crtc,
-			   const struct drm_encoder *encoder, bool enable);
+			   const struct drm_encoder *encoder, bool enable,
+			   unsigned long dotclock);
 
 extern const struct of_device_id sun4i_tcon_of_table[];
 
-- 
2.18.1

