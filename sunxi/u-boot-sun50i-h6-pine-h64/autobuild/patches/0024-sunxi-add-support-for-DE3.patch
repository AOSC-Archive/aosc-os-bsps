From d0ccf020e2f13607238cf8bf7b2e783d07293648 Mon Sep 17 00:00:00 2001
From: Icenowy Zheng <icenowy@aosc.io>
Date: Sun, 22 Jul 2018 11:11:11 +0800
Subject: [PATCH 24/32] sunxi: add support for DE3

The Allwinner H6 SoC come with a new generation of Display Engine,
called DE3, which still has similarity with DE2.

Add support for it.

Signed-off-by: Icenowy Zheng <icenowy@aosc.io>
---
 arch/arm/include/asm/arch-sunxi/display2.h |  18 ++
 arch/arm/include/asm/arch-sunxi/gpio.h     |   1 +
 arch/arm/mach-sunxi/Kconfig                |  13 +-
 drivers/video/sunxi/Makefile               |   4 +
 drivers/video/sunxi/lcdc.c                 |  36 ++-
 drivers/video/sunxi/sun50i_dw_hdmi.c       | 292 +++++++++++++++++++
 drivers/video/sunxi/sunxi_de3.c            | 316 +++++++++++++++++++++
 7 files changed, 666 insertions(+), 14 deletions(-)
 create mode 100644 drivers/video/sunxi/sun50i_dw_hdmi.c
 create mode 100644 drivers/video/sunxi/sunxi_de3.c

diff --git a/arch/arm/include/asm/arch-sunxi/display2.h b/arch/arm/include/asm/arch-sunxi/display2.h
index 7202d2756c..6796c3c840 100644
--- a/arch/arm/include/asm/arch-sunxi/display2.h
+++ b/arch/arm/include/asm/arch-sunxi/display2.h
@@ -27,6 +27,10 @@ struct de_glb {
 	u32 status;
 	u32 dbuff;
 	u32 size;
+#ifdef CONFIG_SUNXI_DE3
+	u32 reserved;
+	u32 gate;
+#endif
 };
 
 /* alpha blending */
@@ -109,6 +113,19 @@ struct de_csc {
 /*
  * DE register constants.
  */
+#ifdef CONFIG_SUNXI_DE3
+#define SUNXI_DE2_MUX0_BASE			(SUNXI_DE3_BASE + 0x100000)
+#define SUNXI_DE2_MUX1_BASE			(SUNXI_DE3_BASE + 0x200000)
+
+#define SUNXI_DE2_MUX_GLB_REGS			0x00000
+#define SUNXI_DE2_MUX_BLD_REGS			0x00800
+#define SUNXI_DE2_MUX_CHAN_REGS			0x01000
+#define SUNXI_DE2_MUX_CHAN_SZ			0x800
+#define SUNXI_DE2_MUX_VSU_REGS			0x20000
+#define SUNXI_DE2_MUX_GSU1_REGS			0x28000
+#define SUNXI_DE2_MUX_GSU2_REGS			0x30000
+#define SUNXI_DE2_MUX_GSU3_REGS			0x38000
+#else
 #define SUNXI_DE2_MUX0_BASE			(SUNXI_DE2_BASE + 0x100000)
 #define SUNXI_DE2_MUX1_BASE			(SUNXI_DE2_BASE + 0x200000)
 
@@ -127,6 +144,7 @@ struct de_csc {
 #define SUNXI_DE2_MUX_ASE_REGS			0xa8000
 #define SUNXI_DE2_MUX_FCC_REGS			0xaa000
 #define SUNXI_DE2_MUX_DCSC_REGS			0xb0000
+#endif
 
 #define SUNXI_DE2_FORMAT_XRGB_8888		4
 #define SUNXI_DE2_FORMAT_RGB_565		10
diff --git a/arch/arm/include/asm/arch-sunxi/gpio.h b/arch/arm/include/asm/arch-sunxi/gpio.h
index 6a5eafc3d3..c9d4e38680 100644
--- a/arch/arm/include/asm/arch-sunxi/gpio.h
+++ b/arch/arm/include/asm/arch-sunxi/gpio.h
@@ -199,6 +199,7 @@ enum sunxi_gpio_number {
 #define SUN6I_GPH_UART0		2
 #define SUN9I_GPH_UART0		2
 #define SUN50I_H6_GPH_UART0	2
+#define SUN50I_H6_GPH_HDMI	2
 
 #define SUNXI_GPI_SDC3		2
 #define SUN7I_GPI_TWI3		3
diff --git a/arch/arm/mach-sunxi/Kconfig b/arch/arm/mach-sunxi/Kconfig
index 558363b52d..43f75459ea 100644
--- a/arch/arm/mach-sunxi/Kconfig
+++ b/arch/arm/mach-sunxi/Kconfig
@@ -291,10 +291,12 @@ config MACH_SUN50I_H5
 config MACH_SUN50I_H6
 	bool "sun50i (Allwinner H6)"
 	select ARM64
+	select DM_I2C
 	select SUPPORT_SPL
 	select FIT
 	select SPL_LOAD_FIT
 	select DRAM_SUN50I_H6
+	select SUNXI_DE3
 
 endchoice
 
@@ -880,17 +882,20 @@ config SUNXI_DE2
 	bool
 	default n
 
+config SUNXI_DE3
+	bool
+	default n
+
 config VIDEO_DE2
 	bool "Display Engine 2 video driver"
-	depends on SUNXI_DE2
+	depends on SUNXI_DE2 || SUNXI_DE3
 	select DM_VIDEO
 	select DISPLAY
 	imply VIDEO_DT_SIMPLEFB
 	default y
 	---help---
-	Say y here if you want to build DE2 video driver which is present on
-	newer SoCs. Currently only HDMI output is supported.
-
+	Say y here if you want to build DE2/DE3 video driver which is
+	present on newer SoCs. Currently only HDMI output is supported.
 
 choice
 	prompt "LCD panel support"
diff --git a/drivers/video/sunxi/Makefile b/drivers/video/sunxi/Makefile
index 147e187992..b0dcf0d5bc 100644
--- a/drivers/video/sunxi/Makefile
+++ b/drivers/video/sunxi/Makefile
@@ -4,4 +4,8 @@
 # Wolfgang Denk, DENX Software Engineering, wd@denx.de.
 
 obj-$(CONFIG_VIDEO_SUNXI) += sunxi_display.o simplefb_common.o lcdc.o tve_common.o ../videomodes.o
+ifeq ($(CONFIG_SUNXI_DE3),y)
+obj-$(CONFIG_VIDEO_DE2) += sunxi_de3.o sun50i_dw_hdmi.o simplefb_common.o lcdc.o ../dw_hdmi.o
+else
 obj-$(CONFIG_VIDEO_DE2) += sunxi_de2.o sunxi_dw_hdmi.o simplefb_common.o lcdc.o ../dw_hdmi.o sunxi_lcd.o
+endif
diff --git a/drivers/video/sunxi/lcdc.c b/drivers/video/sunxi/lcdc.c
index 63c47bf1bc..7ff5033291 100644
--- a/drivers/video/sunxi/lcdc.c
+++ b/drivers/video/sunxi/lcdc.c
@@ -74,7 +74,7 @@ void lcdc_tcon0_mode_set(struct sunxi_lcdc_reg * const lcdc,
 {
 	int bp, clk_delay, total, val;
 
-#ifndef CONFIG_SUNXI_DE2
+#if !defined(CONFIG_SUNXI_DE2) && !defined(CONFIG_SUNXI_DE3)
 	/* Use tcon0 */
 	clrsetbits_le32(&lcdc->ctrl, SUNXI_LCDC_CTRL_IO_MAP_MASK,
 			SUNXI_LCDC_CTRL_IO_MAP_TCON0);
@@ -100,7 +100,8 @@ void lcdc_tcon0_mode_set(struct sunxi_lcdc_reg * const lcdc,
 	writel(SUNXI_LCDC_TCON0_TIMING_V_TOTAL(total) |
 	       SUNXI_LCDC_TCON0_TIMING_V_BP(bp), &lcdc->tcon0_timing_v);
 
-#if defined(CONFIG_VIDEO_LCD_IF_PARALLEL) || defined(CONFIG_VIDEO_DE2)
+#if defined(CONFIG_VIDEO_LCD_IF_PARALLEL) || defined(CONFIG_VIDEO_DE2) || \
+    defined(CONFIG_VIDEO_DE3)
 	writel(SUNXI_LCDC_X(mode->hsync_len.typ) |
 	       SUNXI_LCDC_Y(mode->vsync_len.typ), &lcdc->tcon0_timing_sync);
 
@@ -151,7 +152,7 @@ void lcdc_tcon1_mode_set(struct sunxi_lcdc_reg * const lcdc,
 {
 	int bp, clk_delay, total, val, yres;
 
-#ifndef CONFIG_SUNXI_DE2
+#if !defined(CONFIG_SUNXI_DE2) && !defined(CONFIG_SUNXI_DE3)
 	/* Use tcon1 */
 	clrsetbits_le32(&lcdc->ctrl, SUNXI_LCDC_CTRL_IO_MAP_MASK,
 			SUNXI_LCDC_CTRL_IO_MAP_TCON1);
@@ -217,7 +218,8 @@ void lcdc_pll_set(struct sunxi_ccm_reg *ccm, int tcon, int dotclock,
 	bool use_mipi_pll = false;
 
 	if (tcon == 0) {
-#if defined(CONFIG_VIDEO_LCD_IF_PARALLEL) || defined(CONFIG_SUNXI_DE2)
+#if defined(CONFIG_VIDEO_LCD_IF_PARALLEL) || defined(CONFIG_SUNXI_DE2) || \
+    defined(CONFIG_SUNXI_DE3)
 		min_m = 6;
 		max_m = 127;
 #endif
@@ -236,7 +238,8 @@ void lcdc_pll_set(struct sunxi_ccm_reg *ccm, int tcon, int dotclock,
 	 * not sync to higher frequencies.
 	 */
 	for (m = min_m; m <= max_m; m++) {
-#ifndef CONFIG_SUNXI_DE2
+		/* No not-double clock on DE2 */
+#if !defined(CONFIG_SUNXI_DE2)
 		n = (m * dotclock) / 3000;
 
 		if ((n >= 9) && (n <= 127)) {
@@ -250,12 +253,15 @@ void lcdc_pll_set(struct sunxi_ccm_reg *ccm, int tcon, int dotclock,
 			}
 		}
 
+#if !defined(CONFIG_SUNXI_DE3)
 		/* These are just duplicates */
 		if (!(m & 1))
 			continue;
+#endif
 #endif
 
-		/* No double clock on DE2 */
+		/* No double clock on DE3 */
+#if !defined(CONFIG_SUNXI_DE3)
 		n = (m * dotclock) / 6000;
 		if ((n >= 9) && (n <= 127)) {
 			value = (6000 * n) / m;
@@ -267,6 +273,8 @@ void lcdc_pll_set(struct sunxi_ccm_reg *ccm, int tcon, int dotclock,
 				best_double = 1;
 			}
 		}
+#endif
+		/* TODO: four times clock on DE3 */
 	}
 
 #ifdef CONFIG_MACH_SUN6I
@@ -297,21 +305,29 @@ void lcdc_pll_set(struct sunxi_ccm_reg *ccm, int tcon, int dotclock,
 	if (tcon == 0) {
 		u32 pll;
 
+#ifndef CONFIG_SUNXI_DE3
 		if (use_mipi_pll)
 			pll = CCM_LCD_CH0_CTRL_MIPI_PLL;
 		else if (best_double)
 			pll = CCM_LCD_CH0_CTRL_PLL3_2X;
 		else
 			pll = CCM_LCD_CH0_CTRL_PLL3;
-#ifndef CONFIG_SUNXI_DE2
+#if defined(CONFIG_SUNXI_DE2)
 		writel(CCM_LCD_CH0_CTRL_GATE | CCM_LCD_CH0_CTRL_RST | pll,
-		       &ccm->lcd0_ch0_clk_cfg);
+		       &ccm->lcd0_clk_cfg);
 #else
 		writel(CCM_LCD_CH0_CTRL_GATE | CCM_LCD_CH0_CTRL_RST | pll,
-		       &ccm->lcd0_clk_cfg);
+		       &ccm->lcd0_ch0_clk_cfg);
+#endif
+#else
+		/* MIPI PLL not usable on DE3 SoCs. */
+		(void) use_mipi_pll;
+		/* TODO: four times clock */
+		pll = CCM_LCD0_CTRL_PLL_VIDEO0;
+		writel(CCM_LCD0_CTRL_GATE | pll, &ccm->tcon_lcd0_clk_cfg);
 #endif
 	}
-#ifndef CONFIG_SUNXI_DE2
+#if !defined(CONFIG_SUNXI_DE2) && !defined(CONFIG_SUNXI_DE3)
 	else {
 		writel(CCM_LCD_CH1_CTRL_GATE |
 		       (best_double ? CCM_LCD_CH1_CTRL_PLL3_2X :
diff --git a/drivers/video/sunxi/sun50i_dw_hdmi.c b/drivers/video/sunxi/sun50i_dw_hdmi.c
new file mode 100644
index 0000000000..d63a907b4b
--- /dev/null
+++ b/drivers/video/sunxi/sun50i_dw_hdmi.c
@@ -0,0 +1,292 @@
+/*
+ * Allwinner DW HDMI bridge
+ *
+ * (C) Copyright 2017 Jernej Skrabec <jernej.skrabec@siol.net>
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#include <common.h>
+#include <display.h>
+#include <dm.h>
+#include <dw_hdmi.h>
+#include <edid.h>
+#include <asm/io.h>
+#include <asm/arch/clock.h>
+#include <asm/arch/gpio.h>
+#include <asm/arch/lcdc.h>
+#include <i2c.h>
+#include <linux/delay.h>
+
+struct sunxi_dw_hdmi_priv {
+	struct dw_hdmi hdmi;
+};
+
+static const struct hdmi_phy_config sunxi_phy_config[] = {
+	{
+		.mpixelclock = 25175000,
+		.sym_ctr = 0x8009, .term = 0x0004, .vlev_ctr = 0x0232,
+	}, {
+		.mpixelclock = 27000000,
+		.sym_ctr = 0x8009, .term = 0x0007, .vlev_ctr = 0x02b0,
+	}, {
+		.mpixelclock = 44900000,
+		.sym_ctr = 0x8009, .term = 0x0004, .vlev_ctr = 0x0232,
+	}, {
+		.mpixelclock = 73250000,
+		.sym_ctr = 0x8009, .term = 0x0004, .vlev_ctr = 0x0232,
+	}, {
+		.mpixelclock = 74250000,
+		.sym_ctr = 0x8009, .term = 0x0006, .vlev_ctr = 0x022d,
+	}, {
+		.mpixelclock = 90000000,
+		.sym_ctr = 0x8009, .term = 0x0004, .vlev_ctr = 0x0232,
+	}, {
+		.mpixelclock = 148250000,
+		.sym_ctr = 0x8009, .term = 0x0004, .vlev_ctr = 0x0232,
+	}, {
+		.mpixelclock = 148500000,
+		.sym_ctr = 0x8029, .term = 0x0006, .vlev_ctr = 0x0270,
+	}, {
+		.mpixelclock = 182750000,
+		.sym_ctr = 0x8009, .term = 0x0004, .vlev_ctr = 0x0230,
+	}, {
+		.mpixelclock = 218250000,
+		.sym_ctr = 0x8009, .term = 0x0004, .vlev_ctr = 0x0230,
+	}, {
+		.mpixelclock = 288000000,
+		.sym_ctr = 0x8009, .term = 0x0004, .vlev_ctr = 0x0273,
+	}, {
+		.mpixelclock = 297000000,
+		.sym_ctr = 0x8009, .term = 0x0005, .vlev_ctr = 0x01ab,
+	}, {
+		.mpixelclock = 340000000,
+		.sym_ctr = 0x8029, .term = 0x0004, .vlev_ctr = 0x0273,
+	}, {
+		.mpixelclock = 552750000,
+		.sym_ctr = 0x8039, .term = 0x0004, .vlev_ctr = 0x014a,
+	}, {
+		.mpixelclock = 594000000,
+		.sym_ctr = 0x8029, .term = 0x0000, .vlev_ctr = 0x008a,
+	}, {
+		.mpixelclock = ~0ul,
+		.sym_ctr = 0x0000, .term = 0x0000, .vlev_ctr = 0x0000,
+	}
+};
+
+static const struct hdmi_mpll_config sunxi_mpll_cfg[] = {
+	{
+		.mpixelclock = 25175000,
+		.cpce = 0x00b3, .gmp = 0x0000, .curr = 0x0000,
+	}, {
+		.mpixelclock = 27000000,
+		.cpce = 0x00b3, .gmp = 0x0000, .curr = 0x0012,
+	}, {
+		.mpixelclock = 44900000,
+		.cpce = 0x00b3, .gmp = 0x0000, .curr = 0x0000,
+	}, {
+		.mpixelclock = 73250000,
+		.cpce = 0x0072, .gmp = 0x0001, .curr = 0x0008,
+	}, {
+		.mpixelclock = 74250000,
+		.cpce = 0x0072, .gmp = 0x0001, .curr = 0x0013,
+	}, {
+		.mpixelclock = 90000000,
+		.cpce = 0x0072, .gmp = 0x0001, .curr = 0x0008,
+	}, {
+		.mpixelclock = 148250000,
+		.cpce = 0x0051, .gmp = 0x0002, .curr = 0x001b,
+	}, {
+		.mpixelclock = 148500000,
+		.cpce = 0x0051, .gmp = 0x0002, .curr = 0x0019,
+	}, {
+		.mpixelclock = 182750000,
+		.cpce = 0x0051, .gmp = 0x0002, .curr = 0x001b,
+	}, {
+		.mpixelclock = 218250000,
+		.cpce = 0x0040, .gmp = 0x0003, .curr = 0x0036,
+	}, {
+		.mpixelclock = 288000000,
+		.cpce = 0x0040, .gmp = 0x0003, .curr = 0x0036,
+	}, {
+		.mpixelclock = 297000000,
+		.cpce = 0x0040, .gmp = 0x0003, .curr = 0x0019,
+	}, {
+		.mpixelclock = 340000000,
+		.cpce = 0x0040, .gmp = 0x0003, .curr = 0x0036,
+	}, {
+		.mpixelclock = 552750000,
+		.cpce = 0x1A40, .gmp = 0x0003, .curr = 0x003f,
+	}, {
+		.mpixelclock = ~0ul,
+		.cpce = 0x1A7c, .gmp = 0x0003, .curr = 0x0010,
+	}
+};
+
+static void sunxi_dw_hdmi_pll_set(uint clk_khz)
+{
+	struct sunxi_ccm_reg * const ccm =
+		(struct sunxi_ccm_reg *)SUNXI_CCM_BASE;
+	int best_n = 0, best_m = 0, best_div = 0, best_diff = 0x0FFFFFFF;
+	int value, n, m, div, diff;
+
+	/*
+	 * Find the lowest divider resulting in a matching clock. If there
+	 * is no match, pick the closest lower clock, as monitors tend to
+	 * not sync to higher frequencies.
+	 */
+	for (div = 1; div <= 16; div++)
+		for (m = 1; m <= 2; m++) {
+			n = (m * div * clk_khz) / 6000;
+
+			if ((n >= 1) && (n <= 254)) {
+				value = (6000 * n) / m / div;
+				diff = clk_khz - value;
+				if (diff < best_diff) {
+					best_diff = diff;
+					best_m = m;
+					best_n = n;
+					best_div = div;
+				}
+			}
+		}
+
+	clock_set_pll3_factors(best_m, best_n);
+	setbits_le32(&ccm->hdmi_clk_cfg, CCM_HDMI_CTRL_M(best_div));
+	setbits_le32(&ccm->tcon_tv0_clk_cfg, CCM_LCD0_CTRL_M(best_div));
+	debug("dotclock: %dkHz = %dkHz: (6MHz * %d) / %d / %d\n",
+	      clk_khz, (clock_get_pll3() / 1000) / best_div,
+	      best_n, best_m, best_div);
+}
+
+static void sunxi_dw_hdmi_lcdc_init(const struct display_timing *edid, int bpp)
+{
+	struct sunxi_ccm_reg * const ccm =
+		(struct sunxi_ccm_reg *)SUNXI_CCM_BASE;
+	struct sunxi_lcdc_reg * const lcdc =
+		(struct sunxi_lcdc_reg *)SUNXI_TCON_TV0_BASE;
+
+	/* Set lcd parent to pll3 */
+	clrsetbits_le32(&ccm->tcon_tv0_clk_cfg, CCM_LCD0_CTRL_PLL_MASK,
+			CCM_LCD0_CTRL_PLL_VIDEO0);
+
+	/* Reset off & bus on*/
+	setbits_le32(&ccm->tcon_top_gate_reset,
+		     CCM_LCD_TOP_CTRL_RST | CCM_LCD_TOP_CTRL_GATE);
+
+	/* Reset off & bus on*/
+	setbits_le32(&ccm->tcon_tv_gate_reset,
+		     CCM_TCON_TV_BGR_CTRL_RST | CCM_TCON_TV_BGR_CTRL_GATE);
+
+	/* Clock on */
+	setbits_le32(&ccm->tcon_tv0_clk_cfg, CCM_LCD0_CTRL_GATE);
+
+	/* enable select right tcon for hdmi */
+	/* TODO: move to de3 driver */
+	writel(2, 0x0651001c);
+	writel(BIT(20) | BIT(28), 0x06510020);
+
+	lcdc_init(lcdc);
+	lcdc_tcon1_mode_set(lcdc, edid, false, false);
+	lcdc_enable(lcdc, bpp);
+}
+
+static int sunxi_dw_hdmi_read_edid(struct udevice *dev, u8 *buf, int buf_size)
+{
+	struct sunxi_dw_hdmi_priv *priv = dev_get_priv(dev);
+
+	return dw_hdmi_read_edid(&priv->hdmi, buf, buf_size);
+}
+
+static int sunxi_dw_hdmi_enable(struct udevice *dev, int panel_bpp,
+				const struct display_timing *edid)
+{
+	struct sunxi_dw_hdmi_priv *priv = dev_get_priv(dev);
+	int ret;
+
+	sunxi_dw_hdmi_pll_set(edid->pixelclock.typ/1000);
+
+	/* enable external resistor */
+	writeb(0xc0, SUNXI_HDMI_BASE + 0x10006);
+	writeb(0x80, SUNXI_HDMI_BASE + 0x10007);
+
+	ret = dw_hdmi_enable(&priv->hdmi, edid);
+	if (ret)
+		return ret;
+
+	sunxi_dw_hdmi_lcdc_init(edid, panel_bpp);
+
+	return 0;
+}
+
+static int sunxi_dw_hdmi_probe(struct udevice *dev)
+{
+	struct sunxi_dw_hdmi_priv *priv = dev_get_priv(dev);
+	struct sunxi_ccm_reg * const ccm =
+		(struct sunxi_ccm_reg *)SUNXI_CCM_BASE;
+	int ret;
+
+	/* Toggle HSCL, HSDA pins that are muxed via PIO */
+	sunxi_gpio_set_cfgpin(SUNXI_GPH(8), SUN50I_H6_GPH_HDMI);
+	sunxi_gpio_set_cfgpin(SUNXI_GPH(9), SUN50I_H6_GPH_HDMI);
+
+	/* Set pll3 to 297 MHz */
+	clock_set_pll3(297000000);
+
+	/* Set hdmi parent to pll3 */
+	clrsetbits_le32(&ccm->hdmi_clk_cfg, CCM_HDMI_CTRL_PLL_MASK,
+			CCM_HDMI_CTRL_PLL3);
+
+	setbits_le32(&ccm->hdmi_slow_clk_cfg, CCM_HDMI_SLOW_CTRL_GATE);
+
+	/* Reset HDMI */
+	clrbits_le32(&ccm->hdmi_gate_reset,
+		     CCM_HDMI_BUS_CTRL_RST0 |
+		     CCM_HDMI_BUS_CTRL_RST1);
+
+	udelay(100);
+
+	/* Set ahb gating to pass */
+	setbits_le32(&ccm->hdmi_gate_reset,
+		     CCM_HDMI_BUS_CTRL_GATE |
+		     CCM_HDMI_BUS_CTRL_RST0 |
+		     CCM_HDMI_BUS_CTRL_RST1);
+
+	/* Clock on */
+	setbits_le32(&ccm->hdmi_clk_cfg, CCM_HDMI_CTRL_GATE);
+
+	priv->hdmi.ioaddr = SUNXI_HDMI_BASE;
+	priv->hdmi.i2c_clk_high = 221;
+	priv->hdmi.i2c_clk_low = 245;
+	priv->hdmi.reg_io_width = 1;
+	priv->hdmi.phy_set = dw_hdmi_phy_cfg;
+	priv->hdmi.mpll_cfg = sunxi_mpll_cfg;
+	priv->hdmi.phy_cfg = sunxi_phy_config;
+
+	ret = dw_hdmi_phy_wait_for_hpd(&priv->hdmi);
+	if (ret < 0) {
+		debug("hdmi can not get hpd signal\n");
+		return -1;
+	}
+
+	dw_hdmi_init(&priv->hdmi);
+
+	return 0;
+}
+
+static const struct dm_display_ops sunxi_dw_hdmi_ops = {
+	.read_edid = sunxi_dw_hdmi_read_edid,
+	.enable = sunxi_dw_hdmi_enable,
+};
+
+U_BOOT_DRIVER(sunxi_dw_hdmi) = {
+	.name	= "sun50i_dw_hdmi",
+	.id	= UCLASS_DISPLAY,
+	.ops	= &sunxi_dw_hdmi_ops,
+	.probe	= sunxi_dw_hdmi_probe,
+	.priv_auto_alloc_size = sizeof(struct sunxi_dw_hdmi_priv),
+};
+
+U_BOOT_DEVICE(sunxi_dw_hdmi) = {
+	.name = "sun50i_dw_hdmi"
+};
diff --git a/drivers/video/sunxi/sunxi_de3.c b/drivers/video/sunxi/sunxi_de3.c
new file mode 100644
index 0000000000..6b3f975e4b
--- /dev/null
+++ b/drivers/video/sunxi/sunxi_de3.c
@@ -0,0 +1,316 @@
+#define DEBUG
+
+/*
+ * Allwinner DE2 display driver
+ *
+ * (C) Copyright 2017 Jernej Skrabec <jernej.skrabec@siol.net>
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#include <common.h>
+#include <display.h>
+#include <dm.h>
+#include <edid.h>
+#include <fdtdec.h>
+#include <fdt_support.h>
+#include <video.h>
+#include <asm/global_data.h>
+#include <asm/io.h>
+#include <asm/arch/clock.h>
+#include <asm/arch/display2.h>
+#include <dm/device-internal.h>
+#include <dm/uclass-internal.h>
+#include "simplefb_common.h"
+
+DECLARE_GLOBAL_DATA_PTR;
+
+enum {
+	/* Maximum LCD size we support */
+	LCD_MAX_WIDTH		= 3840,
+	LCD_MAX_HEIGHT		= 2160,
+	LCD_MAX_LOG2_BPP	= VIDEO_BPP32,
+};
+
+static void sunxi_de3_composer_init(void)
+{
+	struct sunxi_ccm_reg * const ccm =
+		(struct sunxi_ccm_reg *)SUNXI_CCM_BASE;
+	u32 reg_value;
+
+	/* set SRAM for video use (H6 only) */
+	reg_value = readl(SUNXI_SRAMC_BASE + 0x04);
+	reg_value &= ~(0x01 << 24);
+	writel(reg_value, SUNXI_SRAMC_BASE + 0x04);
+
+	writel(CCM_PLL10_DEFAULT, &ccm->pll10_cfg);
+	while (!(readl(&ccm->pll10_cfg) & CCM_PLL10_LOCK))
+		;
+
+	/* Set DE parent to pll10 */
+	writel(CCM_DE_CTRL_PLL10 | CCM_DE_CTRL_M(1), &ccm->de_clk_cfg);
+
+	/* Set ahb gating to pass */
+	writel(BIT(0) | BIT(RESET_SHIFT), &ccm->de_gate_reset);
+
+	/* Clock on */
+	setbits_le32(&ccm->de_clk_cfg, CCM_DE_CTRL_ENABLE);
+
+	mdelay(100);
+}
+
+static void sunxi_de3_mode_set(int mux, const struct display_timing *mode,
+			       int bpp, ulong address, bool is_composite)
+{
+	ulong de_mux_base = (mux == 0) ?
+			    SUNXI_DE2_MUX0_BASE : SUNXI_DE2_MUX1_BASE;
+	struct de_clk * const de_clk_regs =
+		(struct de_clk *)(SUNXI_DE3_BASE);
+	struct de_glb * const de_glb_regs =
+		(struct de_glb *)(de_mux_base +
+				  SUNXI_DE2_MUX_GLB_REGS);
+	struct de_bld * const de_bld_regs =
+		(struct de_bld *)(de_mux_base +
+				  SUNXI_DE2_MUX_BLD_REGS);
+	struct de_ui * const de_ui_regs =
+		(struct de_ui *)(de_mux_base +
+				 SUNXI_DE2_MUX_CHAN_REGS +
+				 SUNXI_DE2_MUX_CHAN_SZ * 1);
+	u32 size = SUNXI_DE2_WH(mode->hactive.typ, mode->vactive.typ);
+	int channel;
+	u32 format;
+
+	/* enable clock */
+	setbits_le32(&de_clk_regs->rst_cfg, BIT(mux));
+	setbits_le32(&de_clk_regs->gate_cfg, BIT(mux));
+	setbits_le32(&de_clk_regs->bus_cfg, BIT(mux));
+
+	clrbits_le32(&de_clk_regs->sel_cfg, 1);
+
+	/* wait for clocks*/
+	mdelay(1);
+
+	writel(SUNXI_DE2_MUX_GLB_CTL_EN, &de_glb_regs->ctl);
+	writel(0, &de_glb_regs->status);
+	writel(1, &de_glb_regs->dbuff);
+	writel(size, &de_glb_regs->size);
+
+	for (channel = 0; channel < 4; channel++) {
+		void *ch = (void *)(de_mux_base + SUNXI_DE2_MUX_CHAN_REGS +
+				    SUNXI_DE2_MUX_CHAN_SZ * channel);
+		memset(ch, 0, SUNXI_DE2_MUX_CHAN_SZ);
+	}
+	memset(de_bld_regs, 0, sizeof(struct de_bld));
+
+	writel(0x00000101, &de_bld_regs->fcolor_ctl);
+
+	writel(1, &de_bld_regs->route);
+
+	writel(0, &de_bld_regs->premultiply);
+	writel(0xff000000, &de_bld_regs->bkcolor);
+
+	writel(0x03010301, &de_bld_regs->bld_mode[0]);
+
+	writel(size, &de_bld_regs->output_size);
+	writel(mode->flags & DISPLAY_FLAGS_INTERLACED ? 2 : 0,
+	       &de_bld_regs->out_ctl);
+	writel(0, &de_bld_regs->ck_ctl);
+
+	writel(0xff000000, &de_bld_regs->attr[0].fcolor);
+	writel(size, &de_bld_regs->attr[0].insize);
+
+	/* Disable all scaler units */
+	writel(0, de_mux_base + SUNXI_DE2_MUX_VSU_REGS);
+	writel(0, de_mux_base + SUNXI_DE2_MUX_GSU1_REGS);
+	writel(0, de_mux_base + SUNXI_DE2_MUX_GSU2_REGS);
+	writel(0, de_mux_base + SUNXI_DE2_MUX_GSU3_REGS);
+
+	switch (bpp) {
+	case 16:
+		format = SUNXI_DE2_UI_CFG_ATTR_FMT(SUNXI_DE2_FORMAT_RGB_565);
+		break;
+	case 32:
+	default:
+		format = SUNXI_DE2_UI_CFG_ATTR_FMT(SUNXI_DE2_FORMAT_XRGB_8888);
+		break;
+	}
+
+	writel(SUNXI_DE2_UI_CFG_ATTR_EN | format, &de_ui_regs->cfg[0].attr);
+	writel(size, &de_ui_regs->cfg[0].size);
+	writel(0, &de_ui_regs->cfg[0].coord);
+	writel((bpp / 8) * mode->hactive.typ, &de_ui_regs->cfg[0].pitch);
+	writel(address, &de_ui_regs->cfg[0].top_laddr);
+	writel(size, &de_ui_regs->ovl_size);
+
+	/* apply settings */
+	writel(1, &de_glb_regs->dbuff);
+}
+
+static int sunxi_de3_init(struct udevice *dev, ulong fbbase,
+			  enum video_log2_bpp l2bpp,
+			  struct udevice *disp, int mux, bool is_composite)
+{
+	struct video_priv *uc_priv = dev_get_uclass_priv(dev);
+	struct display_timing timing;
+	struct display_plat *disp_uc_plat;
+	int ret;
+
+	disp_uc_plat = dev_get_uclass_platdata(disp);
+	debug("Using device '%s', disp_uc_priv=%p\n", disp->name, disp_uc_plat);
+	if (display_in_use(disp)) {
+		debug("   - device in use\n");
+		return -EBUSY;
+	}
+
+	disp_uc_plat->source_id = mux;
+
+	ret = device_probe(disp);
+	if (ret) {
+		debug("%s: device '%s' display won't probe (ret=%d)\n",
+		      __func__, dev->name, ret);
+		return ret;
+	}
+
+	ret = display_read_timing(disp, &timing);
+	if (ret) {
+		debug("%s: Failed to read timings\n", __func__);
+		return ret;
+	}
+
+	sunxi_de3_composer_init();
+	sunxi_de3_mode_set(mux, &timing, 1 << l2bpp, fbbase, is_composite);
+
+	ret = display_enable(disp, 1 << l2bpp, &timing);
+	if (ret) {
+		debug("%s: Failed to enable display\n", __func__);
+		return ret;
+	}
+
+	uc_priv->xsize = timing.hactive.typ;
+	uc_priv->ysize = timing.vactive.typ;
+	uc_priv->bpix = l2bpp;
+	debug("fb=%lx, size=%d %d\n", fbbase, uc_priv->xsize, uc_priv->ysize);
+
+	return 0;
+}
+
+static int sunxi_de3_probe(struct udevice *dev)
+{
+	struct video_uc_platdata *plat = dev_get_uclass_platdata(dev);
+	struct udevice *disp;
+	int ret;
+
+	/* Before relocation we don't need to do anything */
+	if (!(gd->flags & GD_FLG_RELOC))
+		return 0;
+
+	ret = uclass_find_device_by_name(UCLASS_DISPLAY,
+					 "sun50i_dw_hdmi", &disp);
+	if (ret) {
+		debug("%s: hdmi display not found (ret=%d)\n", __func__, ret);
+		return ret;
+	}
+
+	ret = sunxi_de3_init(dev, plat->base, VIDEO_BPP32, disp, 0,
+			     false);
+	if (ret)
+		return ret;
+
+	video_set_flush_dcache(dev, 1);
+	return 0;
+}
+
+static int sunxi_de3_bind(struct udevice *dev)
+{
+	struct video_uc_platdata *plat = dev_get_uclass_platdata(dev);
+
+	plat->size = LCD_MAX_WIDTH * LCD_MAX_HEIGHT *
+		(1 << LCD_MAX_LOG2_BPP) / 8;
+
+	return 0;
+}
+
+static const struct video_ops sunxi_de3_ops = {
+};
+
+U_BOOT_DRIVER(sunxi_de3) = {
+	.name	= "sunxi_de3",
+	.id	= UCLASS_VIDEO,
+	.ops	= &sunxi_de3_ops,
+	.bind	= sunxi_de3_bind,
+	.probe	= sunxi_de3_probe,
+	.flags	= DM_FLAG_PRE_RELOC,
+};
+
+U_BOOT_DEVICE(sunxi_de3) = {
+	.name = "sunxi_de3"
+};
+
+/*
+ * Simplefb support.
+ */
+#if defined(CONFIG_OF_BOARD_SETUP) && defined(CONFIG_VIDEO_DT_SIMPLEFB)
+int sunxi_simplefb_setup(void *blob)
+{
+	struct udevice *de2, *hdmi;
+	struct video_priv *de2_priv;
+	struct video_uc_platdata *de2_plat;
+	int offset, ret;
+	u64 start, size;
+	const char *pipeline = NULL;
+
+	debug("Setting up simplefb\n");
+
+	/* Skip simplefb setting if DE2 / HDMI is not present */
+	ret = uclass_find_device_by_name(UCLASS_VIDEO,
+					 "sunxi_de3", &de2);
+	if (ret) {
+		debug("DE3 not present\n");
+		return 0;
+	} else if (!device_active(de2)) {
+		debug("DE3 present but not probed\n");
+		return 0;
+	}
+
+	ret = uclass_find_device_by_name(UCLASS_DISPLAY,
+					 "sun50i_dw_hdmi", &hdmi);
+	if (ret) {
+		debug("HDMI not present\n");
+	} else if (device_active(hdmi)) {
+		pipeline = "mixer0-tcon_tv0-hdmi";
+	} else {
+		debug("HDMI present but not probed\n");
+	}
+
+	if (!pipeline) {
+		debug("No active display present\n");
+		return 0;
+	}
+
+	de2_priv = dev_get_uclass_priv(de2);
+	de2_plat = dev_get_uclass_platdata(de2);
+
+	offset = sunxi_simplefb_fdt_match(blob, pipeline);
+	if (offset < 0) {
+		eprintf("Cannot setup simplefb: node not found\n");
+		return 0; /* Keep older kernels working */
+	}
+
+	start = gd->bd->bi_dram[0].start;
+	size = de2_plat->base - start;
+	ret = fdt_fixup_memory_banks(blob, &start, &size, 1);
+	if (ret) {
+		eprintf("Cannot setup simplefb: Error reserving memory\n");
+		return ret;
+	}
+
+	ret = fdt_setup_simplefb_node(blob, offset, de2_plat->base,
+			de2_priv->xsize, de2_priv->ysize,
+			VNBYTES(de2_priv->bpix) * de2_priv->xsize,
+			"x8r8g8b8");
+	if (ret)
+		eprintf("Cannot setup simplefb: Error setting properties\n");
+
+	return ret;
+}
+#endif /* CONFIG_OF_BOARD_SETUP && CONFIG_VIDEO_DT_SIMPLEFB */
-- 
2.18.0

